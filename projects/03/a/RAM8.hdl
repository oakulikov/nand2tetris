// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    Register(in=i0, load=load, out=r0);
    Register(in=i1, load=load, out=r1);
    Register(in=i2, load=load, out=r2);
    Register(in=i3, load=load, out=r3);
    Register(in=i4, load=load, out=r4);
    Register(in=i5, load=load, out=r5);
    Register(in=i6, load=load, out=r6);
    Register(in=i7, load=load, out=r7);
    Mux8Way16(a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, sel=address, out=out);
    Xor(a=true, b=address[0], out=x00);
    Xor(a=true, b=address[1], out=x01);
    Xor(a=true, b=address[2], out=x02);
    FullAdder(a=x00, b=x01, c=x02, sum=sum0, carry=g0);
    And(a=sum0, b=g0, out=xload0);
    Mux16(a=r0, b=in, sel=xload0, out=i0);
    Xor(a=false, b=address[0], out=x10);
    Xor(a=true, b=address[1], out=x11);
    Xor(a=true, b=address[2], out=x12);
    FullAdder(a=x10, b=x11, c=x12, sum=sum1, carry=g1);
    And(a=sum1, b=g1, out=xload1);
    Mux16(a=r1, b=in, sel=xload1, out=i1);
    Xor(a=true, b=address[0], out=x20);
    Xor(a=false, b=address[1], out=x21);
    Xor(a=true, b=address[2], out=x22);
    FullAdder(a=x20, b=x21, c=x22, sum=sum2, carry=g2);
    And(a=sum2, b=g2, out=xload2);
    Mux16(a=r2, b=in, sel=xload2, out=i2);
    Xor(a=false, b=address[0], out=x30);
    Xor(a=false, b=address[1], out=x31);
    Xor(a=true, b=address[2], out=x32);
    FullAdder(a=x30, b=x31, c=x32, sum=sum3, carry=g3);
    And(a=sum3, b=g3, out=xload3);
    Mux16(a=r3, b=in, sel=xload3, out=i3);
    Xor(a=true, b=address[0], out=x40);
    Xor(a=true, b=address[1], out=x41);
    Xor(a=false, b=address[2], out=x42);
    FullAdder(a=x40, b=x41, c=x42, sum=sum4, carry=g4);
    And(a=sum4, b=g4, out=xload4);
    Mux16(a=r4, b=in, sel=xload4, out=i4);
    Xor(a=false, b=address[0], out=x50);
    Xor(a=true, b=address[1], out=x51);
    Xor(a=false, b=address[2], out=x52);
    FullAdder(a=x50, b=x51, c=x52, sum=sum5, carry=g5);
    And(a=sum5, b=g5, out=xload5);
    Mux16(a=r5, b=in, sel=xload5, out=i5);
    Xor(a=true, b=address[0], out=x60);
    Xor(a=false, b=address[1], out=x61);
    Xor(a=false, b=address[2], out=x62);
    FullAdder(a=x60, b=x61, c=x62, sum=sum6, carry=g6);
    And(a=sum6, b=g6, out=xload6);
    Mux16(a=r6, b=in, sel=xload6, out=i6);
    Xor(a=false, b=address[0], out=x70);
    Xor(a=false, b=address[1], out=x71);
    Xor(a=false, b=address[2], out=x72);
    FullAdder(a=x70, b=x71, c=x72, sum=sum7, carry=g7);
    And(a=sum7, b=g7, out=xload7);
    Mux16(a=r7, b=in, sel=xload7, out=i7);
}
